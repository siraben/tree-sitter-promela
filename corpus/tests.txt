================================================================================
Comment
================================================================================

// this is a comment

/*
  Multi-line comment
*/

--------------------------------------------------------------------------------

(program
  (comment)
  (comment))

================================================================================
Single assignment
================================================================================

init {
  x = 3;
}

--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (Stmnt
            (assignment
              (varref
                (cmpnd
                  (pfld)))
              (full_expr
                (expr
                  (const
                    (number)))))))))))

================================================================================
Declaring multiple variables
================================================================================

Crypt data, intercepted;

--------------------------------------------------------------------------------

(program
  (one_decl
    (var_list
      (ivar
        (vardcl
          (uname)))
      (ivar
        (vardcl
          (uname))))))

================================================================================
hello.pml
================================================================================

init {
    printf("passed first test!")
}

--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (Stmnt
            (printf
              (string))))))))

================================================================================
If statement
================================================================================

init {
  if
  :: value = 3;
  :: value = 4;
  fi
}


--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (Special
            (if
              (options
                (option
                  (sequence
                    (step
                      (Stmnt
                        (assignment
                          (varref
                            (cmpnd
                              (pfld)))
                          (full_expr
                            (expr
                              (const
                                (number)))))))))
                (option
                  (sequence
                    (step
                      (Stmnt
                        (assignment
                          (varref
                            (cmpnd
                              (pfld)))
                          (full_expr
                            (expr
                              (const
                                (number)))))))))))))))))

================================================================================
mtype declaration
================================================================================

mtype = { operator, value }

--------------------------------------------------------------------------------

(program
  (one_decl
    (type)
    (nlst)))

================================================================================
array declaration
================================================================================

int a[5], b[5], c[5]

--------------------------------------------------------------------------------

(program
  (one_decl
    (type)
    (var_list
      (ivar
        (vardcl
          (uname)
          (const_expr
            (const
              (number)))))
      (ivar
        (vardcl
          (uname)
          (const_expr
            (const
              (number)))))
      (ivar
        (vardcl
          (uname)
          (const_expr
            (const
              (number))))))))

================================================================================
proctype
================================================================================

active proctype cr() { skip }

--------------------------------------------------------------------------------

(program
  (proc
    (inst)
    (body
      (sequence
        (step
          (Stmnt
            (full_expr
              (expr
                (const
                  (skip))))))))))

================================================================================
ltl
================================================================================

ltl alwayserr { [] ((statusa == err) || (statusb == err)) }

--------------------------------------------------------------------------------

(program
  (ltl
    (ltl_body
      (full_expr
        (expr
          (ltl_expr
            (expr
              (expr
                (expr
                  (expr
                    (expr
                      (varref
                        (cmpnd
                          (pfld))))
                    (expr
                      (varref
                        (cmpnd
                          (pfld))))))
                (expr
                  (expr
                    (expr
                      (varref
                        (cmpnd
                          (pfld))))
                    (expr
                      (varref
                        (cmpnd
                          (pfld))))))))))))))

================================================================================
dotted assignment
================================================================================

init {
  intercepted.key = 3;
}

--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (Stmnt
            (assignment
              (varref
                (cmpnd
                  (pfld)
                  (pfld)))
              (full_expr
                (expr
                  (const
                    (number)))))))))))

================================================================================
for loop
================================================================================
init {
    for (i in a) { skip }
}

--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (Special
            (for_pre
              (varref
                (cmpnd
                  (pfld))))
            (varref
              (cmpnd
                (pfld)))
            (for_post
              (sequence
                (step
                  (Stmnt
                    (full_expr
                      (expr
                        (const
                          (skip))))))))))))))

================================================================================
Declaration of variable of custom in body
================================================================================
Crypt x;
init {
  Crypt x;
}

--------------------------------------------------------------------------------

(program
  (one_decl
    (var_list
      (ivar
        (vardcl
          (uname)))))
  (init
    (body
      (sequence
        (step
          (one_decl
            (var_list
              (ivar
                (vardcl
                  (uname))))))))))

================================================================================
Subsequent variable declarations
================================================================================

init {
  mtype pkey;
  mtype pnonce;
}

--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (one_decl
            (type)
            (var_list
              (ivar
                (vardcl
                  (uname))))))
        (step
          (one_decl
            (type)
            (var_list
              (ivar
                (vardcl
                  (uname))))))))))

================================================================================
If block without semicolon
================================================================================
init {
    if 
    :: skip;
    fi
    x = 3;
}

--------------------------------------------------------------------------------

(program
  (init
    (body
      (sequence
        (step
          (Special
            (if
              (options
                (option
                  (sequence
                    (step
                      (Stmnt
                        (full_expr
                          (expr
                            (const
                              (skip))))))))))))
        (step
          (Stmnt
            (assignment
              (varref
                (cmpnd
                  (pfld)))
              (full_expr
                (expr
                  (const
                    (number)))))))))))
